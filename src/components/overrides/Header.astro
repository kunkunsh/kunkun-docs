---
import type { Props } from '@astrojs/starlight/props';
import LanguageSelect from '@astrojs/starlight/components/LanguageSelect.astro';
import Search from '@astrojs/starlight/components/Search.astro';
import SiteTitle from './SiteTitle.astro';
import SocialIcons from '@astrojs/starlight/components/SocialIcons.astro';
// import ThemeSelect from './ThemeSelect.astro';
import VtbotStarlight from 'astro-vtbot/components/starlight/Base.astro';
import ThemeObserve from './ThemeObserve.astro'
import ThemeSelect from '@astrojs/starlight/components/ThemeSelect.astro';
import PostHog from "../analytics/posthog.astro";
import GoogleAnalytics from '../analytics/google-analytics.astro';
import SyncThemeVue from '@/components/theme/sync-theme.vue'

const curLocale = Astro.props.locale;

type Link = {
	title: string;
	value: string;
	transfer: boolean;
};

const links: Link[] = [
	{
		title: 'Guides',
		value: '/guides/get-started',
		transfer: true,
	},
	{
		title: 'API Docs',
		value: '/api-docs',
		transfer: true,
	},
	{
		title: 'Blog',
		value: '/blog/creation/',
		transfer: false,
	},
	{
		title: 'Releases',
		value: 'https://github.com/kunkunsh/kunkun/releases',
		transfer: true,
	},
];
---

<!-- <script>
import { syncThemeClass } from "@/utils/theme";

syncThemeClass()

</script> -->

<head>
	<PostHog />
	<GoogleAnalytics />
</head>
<ThemeObserve />
<!-- <SyncThemeVue client:only="vue" /> -->
<!-- <VtbotStarlight {...Astro.props} transition:animate="fade"> -->
	<div class="header sl-flex">
		<div class="full-width sl-flex">
			<SiteTitle {...Astro.props} />
		</div>
		<div class="sl-flex">
			<Search {...Astro.props} />
		</div>
		<!-- <h1>Hello from header</h1> -->
		<div class="sl-hidden md:sl-flex right-group">
			<div class="desktop">
				{
					links.map((link) => (
						<a href={link.transfer && curLocale ? `/${curLocale}${link.value}` : link.value}>
							{link.title}
						</a>
					))
				}
			</div>
			<div class="sl-flex social-icons">
				<SocialIcons {...Astro.props} />
			</div>
			<ThemeSelect {...Astro.props} />
			<LanguageSelect {...Astro.props} />
		</div>
	</div>
<!-- </VtbotStarlight> -->

<style>
	.header {
		gap: var(--sl-nav-gap);
		justify-content: space-between;
		align-items: center;
		height: 100%;
	}
	.full-width {
		width: 100%;
	}
	.right-group,
	.social-icons {
		gap: 1rem;
		align-items: center;
	}
	.desktop,
	.release-link::after,
	.social-icons::after {
		content: '';
		height: 2rem;
		border-inline-end: 1px solid var(--sl-color-gray-5);
	}

	@media (min-width: 50rem) {
		:global(:root[data-has-sidebar]) {
			--__sidebar-pad: calc(2 * var(--sl-nav-pad-x));
		}
		:global(:root:not([data-has-toc])) {
			--__toc-width: 0rem;
		}
		.header {
			--__sidebar-width: max(0rem, var(--sl-content-inline-start, 0rem) - var(--sl-nav-pad-x));
			--__main-column-fr: calc(
				(
						100% + var(--__sidebar-pad, 0rem) - var(--__toc-width, var(--sl-sidebar-width)) -
							(2 * var(--__toc-width, var(--sl-nav-pad-x))) - var(--sl-content-inline-start, 0rem) -
							var(--sl-content-width)
					) / 2
			);
			display: grid;
			grid-template-columns:
        /* 1 (site title): runs up until the main content columnâ€™s left edge or the width of the title, whichever is the largest  */
				minmax(
					calc(var(--__sidebar-pad, 0rem)),
					auto
				)
				/* 2 (search box): all free space that is available. */
				1fr
				/* 3 (right items): use the space that these need. */
				auto;
			align-content: center;
		}
	}

	.action {
		gap: 0.5em;
		align-items: center;
		padding: 0.5rem 1.125rem;
		color: var(--sl-color-gray-1);
		line-height: 1.1875;
		text-decoration: none;
		font-size: var(--sl-text-sm);
	}
	.action:hover {
		color: var(--sl-color-gray-2);
	}
	.action.primary {
		background: var(--sl-color-text-accent);
		color: var(--sl-color-black);
	}
	.action.secondary {
		border: 1px solid;
	}
	.action.minimal {
		padding-inline: 0;
	}

	@media (min-width: 50rem) {
		.action {
			font-size: var(--sl-text-base);
			padding: 1rem 1.25rem;
		}
	}

	.release-link {
		gap: 1rem;
	}
</style>
<style is:global>
	.header {
		border: none !important;
	}
body[data-mobile-menu-expanded] header {
	background-color: var(--sl-color-bg);
}
</style>

{Astro.props.entry.slug === '' ?
<style>
	.header {
		background-color: transparent;
    	-webkit-backdrop-filter: blur(16px);
		backdrop-filter: blur(16px);
		padding-inline-end: calc(var(--sl-nav-gap) + var(--sl-nav-pad-x));
	}

	@media (min-width: 50rem) {
		header {
			background-color: transparent !important;
		}
	}
	@media (min-width: 50rem) {
		.header {
			padding-inline-end: var(--sl-nav-pad-y);
		}
	}
</style>
: ''
}

<style>
	.desktop {
		display: none;
		align-items: center;
		gap: 1rem;
		padding-inline-end: 1rem;
	}
	@media (min-width: 72rem) {
		.desktop {
			display: flex;
		}
		.mobile {
			display: none;
		}
	}

	a {
		color: var(--sl-color-white);
		font-weight: 600;
		text-decoration: none;
	}

	/* From https://github.com/withastro/starlight/blob/main/packages/starlight/components/Select.astro */
	label {
		--sl-label-icon-size: 0.875rem;
		--sl-caret-size: 1.25rem;
		position: relative;
		display: flex;
		align-items: center;
		gap: 0.25rem;
		color: var(--sl-color-gray-1);
	}

	label:hover {
		color: var(--sl-color-gray-2);
	}

	.icon {
		position: absolute;
		top: 50%;
		transform: translateY(-50%);
		pointer-events: none;
	}

	.label-icon {
		font-size: var(--sl-label-icon-size);
		inset-inline-start: 0;
	}

	.caret {
		font-size: var(--sl-caret-size);
		inset-inline-end: 0;
	}

	select {
		border: 0;
		padding-block: 0.625rem;
		padding-inline: calc(var(--sl-label-icon-size) + 0.25rem) calc(var(--sl-caret-size) + 0.25rem);
		width: var(--sl-select-width);
		background-color: transparent;
		text-overflow: ellipsis;
		color: inherit;
		cursor: pointer;
		appearance: none;
	}

	option {
		background-color: var(--sl-color-bg-nav);
		color: var(--sl-color-gray-1);
	}

	@media (min-width: 50rem) {
		select {
			font-size: var(--sl-text-sm);
		}
	}
</style>
